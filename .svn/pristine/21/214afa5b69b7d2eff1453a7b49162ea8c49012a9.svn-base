package newwater.com.newwater.utils;

import android.app.Activity;
import android.os.Handler;
import android.serialport.DevUtil;
import android.widget.Toast;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONObject;

import org.xutils.DbManager;
import org.xutils.ex.DbException;

import java.io.IOException;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Timer;
import java.util.TimerTask;

import newwater.com.newwater.Sys_Device_Monitor_Config_DbOperate;
import newwater.com.newwater.TestJSON;
import newwater.com.newwater.beans.SysDeviceNoticeAO;
import newwater.com.newwater.beans.SysDeviceWaterQualityAO;
import newwater.com.newwater.beans.Sys_Device_Monitor_Config;
import newwater.com.newwater.constants.Constant;
import newwater.com.newwater.constants.UriConstant;
import newwater.com.newwater.view.activity.MainActivity;
import okhttp3.Request;

/**
 * Created by Administrator on 2018/4/28 0028.
 */

public class TimeRun {

    //    https://blog.csdn.net/qinde025/article/details/6828723
    public  TimerTask task;
    private DevUtil devUtil = null;
    private Handler handler = null;

    private DbManager dbManager;
    private Date time;
    private long loopjiange=1000*60*60*24;
    private Activity context;

    /**
     * @param context
     * @param handler
     * @param loopjiange
     * @param what
     * @param operateflag 1:水质状态
     */

    public TimeRun( final Activity context, Date time, final Handler handler, final long loopjiange, final int what, final int operateflag) {
        if (null == devUtil) {
            devUtil = new DevUtil(null);
        }
        this.time = time;
        this.loopjiange = loopjiange;
        this.context = context;

        dbManager = new XutilsInit(context).getDb();
        this.task = new TimerTask() {
            @Override
            public void run() {
                if (Constant.TIME_OPERATE_UPDATEWATER == operateflag) {
                    //上传水质
                    GetDeviceInfo getDeviceInfo = new GetDeviceInfo();
                    String deviceId = "";
                    if(Constant.TEST == true){
                         deviceId = "1";
                    }else{
                         deviceId = BaseSharedPreferences.getString(context,Constant.DEVICE_ID_KEY);
                    }

                    SysDeviceWaterQualityAO sysDeviceWaterQualityAO = new SysDeviceWaterQualityAO();
                    sysDeviceWaterQualityAO.setDeviceId(Integer.parseInt(deviceId));

                    sysDeviceWaterQualityAO.setDeviceRawWater(devUtil.get_run_sTDS_value());
                    sysDeviceWaterQualityAO.setDevicePureWater(devUtil.get_run_sTDS_value());
                    sysDeviceWaterQualityAO.setDeviceWaterQualityTime(TimeUtils.getCurrentTime());
                    sysDeviceWaterQualityAO.setHotTemp(devUtil.get_run_hotTemp_value());
                    sysDeviceWaterQualityAO.setColdTemp(devUtil.get_run_coolTemp_value());
                    sysDeviceWaterQualityAO.setHeatingStatus(devUtil.get_run_bHot_value());
                    sysDeviceWaterQualityAO.setCoolingStatus(devUtil.get_run_bCool_value());
                    sysDeviceWaterQualityAO.setWaterPurificationStatus(devUtil.get_run_bWater_value());
                    sysDeviceWaterQualityAO.setFlushStatus(devUtil.get_run_bRinse_value());
                    sysDeviceWaterQualityAO.setRawWaterStatus(devUtil.get_run_bFault_value());
                    sysDeviceWaterQualityAO.setWaterLeakageStatus(devUtil.get_run_bLeak_value());
                    sysDeviceWaterQualityAO.setSwitchStatus(devUtil.get_run_bSwitch_value());
                    sysDeviceWaterQualityAO.setWaterCupStatus(devUtil.get_run_bCup_value());
                    String hotoutornot = "";
                    if (devUtil.get_run_hotWaterSW_value() == true) {
                        sysDeviceWaterQualityAO.setHotWaterOutletStatus(1);
                    } else {
                        sysDeviceWaterQualityAO.setHotWaterOutletStatus(0);
                    }
                    if (devUtil.get_run_coolWaterSW_value() == true) {
                        sysDeviceWaterQualityAO.setColdWaterOutletStatus(1);
                    } else {
                        sysDeviceWaterQualityAO.setColdWaterOutletStatus(0);
                    }

                    //温水出水状态
                    if (devUtil.get_run_normalWaterSW_value() == true) {
                        sysDeviceWaterQualityAO.setWarmWaterOutletStatus(1);
                    } else {
                        sysDeviceWaterQualityAO.setWarmWaterOutletStatus(0);
                    }
                    //加热设备温度
                    sysDeviceWaterQualityAO.setHeatingTemp(devUtil.get_pam_hotTemp_value());
                    //制冷设备温度
                    sysDeviceWaterQualityAO.setCoolingTemp(devUtil.get_pam_coolTemp_value());
                    //单位是分钟

                    sysDeviceWaterQualityAO.setFlushInterval(devUtil.get_pam_rinseTimeLong_value());

                    sysDeviceWaterQualityAO.setFlushDuration(devUtil.get_pam_rinseInterval_value());

                    try {
                        dbManager.save(sysDeviceWaterQualityAO);
                    } catch (DbException e) {
                        e.printStackTrace();
                    }

                }

                if (Constant.TIME_OPETATE_UPDATESCODE == operateflag) {
                    String sCodeUrl = "";
                    String Device = BaseSharedPreferences.getString(context,Constant.DEVICE_ID_KEY);
                    if(Constant.TEST == true){
                         sCodeUrl = RestUtils.getUrl(UriConstant.GETTEMPQCODE)+"/1";
                    }else{
                         sCodeUrl = RestUtils.getUrl(UriConstant.GETTEMPQCODE)+Device;
                    }

                    OkHttpUtils.getAsyn(sCodeUrl, new OkHttpUtils.StringCallback() {
                        @Override
                        public void onFailure(int errCode, Request request, IOException e) {

                        }

                        @Override
                        public void onResponse(String response) {
                            JSONObject scodeobj = JSONObject.parseObject(response);

                            if("0".equals(scodeobj.getString("code"))){
                                String data = scodeobj.getString("data");
                                BaseSharedPreferences.setString(context,Constant.SCODEKEY,data);
                            }
                        }
                    });
                }

                if(Constant.TIME_OPETATE_WARNING == operateflag){
                    String deviceNoticeUrl = RestUtils.getUrl(UriConstant.NOTICEQUALITY);
                    String postdata = "";
                    boolean updateflag = false;
                    boolean operateflag = false;
                    SysDeviceNoticeAO sysDeviceNoticeAO = new SysDeviceNoticeAO();
                    sysDeviceNoticeAO.setDeviceId(Integer.parseInt(TestJSON.getDeviceid()));
                    if(DevUtil.ERR_TIMEOUT==1){
                        sysDeviceNoticeAO.setDeviceNoticeType(1);
                        updateflag = true;
                    }
                    //滤芯过了
                    boolean filterflag = filterOver();
                    if(false == filterflag){
                        sysDeviceNoticeAO.setDeviceNoticeType(2);
                        updateflag = true;

                    }
                    //滤芯是否用完
                    boolean filterend = filterend();
                    if(false == filterend){
                        sysDeviceNoticeAO.setDeviceNoticeType(3);
                        operateflag = true;
                        updateflag = true;

                    }
                    //水质是否异常
                    if(Constant.TDSERROR>devUtil.get_run_oTDS_value()){
                        sysDeviceNoticeAO.setDeviceNoticeType(4);
                        updateflag = true;
                        operateflag = true;

                    }
                    //纸杯不足
                    if(devUtil.get_run_bCup_value()==0){
                        sysDeviceNoticeAO.setDeviceNoticeType(5);
                        updateflag = true;

                    }
                    //耗水量异常
                    //漏电
                    if(devUtil.get_run_bLeak_value()==02){
                        sysDeviceNoticeAO.setDeviceNoticeType(9);
                        updateflag = true;
                        operateflag = true;

                    }



                    //原水缺水
                    if(devUtil.get_run_bLeak_value()==02){
                        sysDeviceNoticeAO.setDeviceNoticeType(10);
                        updateflag = true;
                        operateflag = true;

                    }

                    //警告的类型
                    sysDeviceNoticeAO.setDeviceNoticeLeve(0);

                    sysDeviceNoticeAO.setDeviceNoticeSubject("");
                    sysDeviceNoticeAO.setDeviceNoticeContent("");

                    String warningtime = TimeUtils.getCurrentTime();
                    sysDeviceNoticeAO.setDeviceNoticeTime(warningtime);
                    try {
                        dbManager.save(sysDeviceNoticeAO);
                    } catch (DbException e) {
                        e.printStackTrace();
                    }

                }



                //

            }
        };

    }


    public void startTimer(){
        Timer timer = new Timer(true);
        timer.schedule(task, time, loopjiange);
    };


    public boolean filterOver() {
        Boolean filterOverflag = true;
        Sys_Device_Monitor_Config_DbOperate sys_device_monitor_config_dbOperate = new Sys_Device_Monitor_Config_DbOperate(context);
        String[][] data=devUtil.toArray();
        try {
            List warningdata = sys_device_monitor_config_dbOperate.find();
            Sys_Device_Monitor_Config monitor = (Sys_Device_Monitor_Config) warningdata.get(0);
            if (monitor.getMotCfgGrainCarbonFlow() - Integer.parseInt(data[17][1]) < Constant.MOT_CFG_GRAIN_CARBON_FLOW) {
                monitor.setMotCfgGrainCarbonFlow(monitor.getMotCfgGrainCarbonFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = false;
            }

            if (monitor.getMotCfgPoseCarbonFlow() - Integer.parseInt(data[17][1]) < Constant.MOT_CFG_POSE_CARBON_FLOW) {
                monitor.setMotCfgPoseCarbonFlow(monitor.getMotCfgPoseCarbonFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = false;
            }

            if (monitor.getMotCfgPressCarbonFlow() - Integer.parseInt(data[17][1]) < Constant.MOT_CFG_PRESS_CARBON_FLOW) {
                monitor.setMotCfgPressCarbonFlow(monitor.getMotCfgPressCarbonFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = false;
            }

            if (monitor.getMotCfgPpFlow() - Integer.parseInt(data[17][1]) < Constant.MOT_CFG_PP_FLOW) {
                monitor.setMotCfgPpFlow(monitor.getMotCfgPpFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = false;
            }


            if (monitor.getMotCfgRoFlow() - Integer.parseInt(data[17][1]) < Constant.MOT_CFG_RO_FLOW) {
                monitor.setMotCfgRoFlow(monitor.getMotCfgRoFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = false;
            }
        } catch (DbException e) {
            e.printStackTrace();
        }
        return  filterOverflag;
    }



    public boolean filterend() {
        Boolean filterOverflag = false;
        Sys_Device_Monitor_Config_DbOperate sys_device_monitor_config_dbOperate = new Sys_Device_Monitor_Config_DbOperate(context);
        String[][] data=devUtil.toArray();
        try {
            List warningdata = sys_device_monitor_config_dbOperate.find();
            Sys_Device_Monitor_Config monitor = (Sys_Device_Monitor_Config) warningdata.get(0);
            if (monitor.getMotCfgGrainCarbonFlow() - Integer.parseInt(data[17][1]) <= 0) {
                monitor.setMotCfgGrainCarbonFlow(monitor.getMotCfgGrainCarbonFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = true;
            }

            if (monitor.getMotCfgPoseCarbonFlow() - Integer.parseInt(data[17][1]) <= 0) {
                monitor.setMotCfgPoseCarbonFlow(monitor.getMotCfgPoseCarbonFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = true;
            }

            if (monitor.getMotCfgPressCarbonFlow() - Integer.parseInt(data[17][1]) <= 0) {
                monitor.setMotCfgPressCarbonFlow(monitor.getMotCfgPressCarbonFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = true;
            }

            if (monitor.getMotCfgPpFlow() - Integer.parseInt(data[17][1]) <= 0) {
                monitor.setMotCfgPpFlow(monitor.getMotCfgPpFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = true;
            }


            if (monitor.getMotCfgRoFlow() - Integer.parseInt(data[17][1]) <= 0) {
                monitor.setMotCfgRoFlow(monitor.getMotCfgRoFlow() - Integer.parseInt(data[17][1]));
                sys_device_monitor_config_dbOperate.update(monitor);
                //TODO 准备上传
                filterOverflag = true;
            }
        } catch (DbException e) {
            e.printStackTrace();
        }
        return  filterOverflag;
    }



    public void cancelTimer() {
        this.task.cancel();
    }

    //TODO 封装一个获取date的方法
    public static Date tasktime(int hour, int minute, int second) {
        Calendar calendar = Calendar.getInstance();
        calendar.set(Calendar.HOUR_OF_DAY, hour); //凌晨1点
        calendar.set(Calendar.MINUTE, minute);
        calendar.set(Calendar.SECOND, second);
        Date date = calendar.getTime(); //第一次执行定时任务的时间
        return date;
    }


}
