package newwater.com.newwater.utils;

import android.util.Log;

import com.tencent.android.tpush.service.cache.CacheManager;

import org.xutils.common.util.LogUtil;

import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import newwater.com.newwater.beans.LoginInfo;
import okhttp3.Callback;
import okhttp3.FormBody;
import okhttp3.Interceptor;
import okhttp3.OkHttpClient;
import okhttp3.Request;
import okhttp3.RequestBody;
import okhttp3.Response;
import retrofit2.Call;

/**
 * 全局自动刷新Token的拦截器
 */

public class TokenInterceptor implements Interceptor {

    @Override
    public Response intercept(Chain chain) throws IOException {
        Request request = chain.request();
        Response response = chain.proceed(request);
        Log.i("Interceptor","response.code=" + response.code());

        if (isTokenExpired(response)) {//根据和服务端的约定判断token过期
            Log.i("Interceptor","静默自动刷新Token,然后重新请求数据");
            //同步请求方式，获取最新的Token
            String newSession = getNewToken();
            //使用新的Token，创建新的请求
            Request newRequest = chain.request()
                    .newBuilder()
                    .header("Cookie", "JSESSIONID=" + newSession)
                    .build();
            //重新请求
            return chain.proceed(newRequest);
        }
        return response;
    }

    /**
     * 根据Response，判断Token是否失效
     *
     * @param response
     * @return
     */
    private boolean isTokenExpired(Response response) {
        if (response.code() != 200) {
            return true;
        }
        return false;
    }

    /**
     * 同步请求方式，获取最新的Token
     *
     * @return
     */
    private String getNewToken() throws IOException {

        String url = "http://192.168.0.200:28301/api/v1/token?loginName=123&loginPassword=456";
        final String[] result = {""};

        /*Map<String, String> params = new HashMap();
        params.put("loginName", "123");
        params.put("loginPassword", "456");*/
        //将请求添加到调度中
        OkHttpUtils.getAsyn(url,
                new OkHttpUtils.StringCallback() {
                    @Override
                    public void onFailure(Request request, IOException e) {
                        Log.i("getToken", request.body().toString());
                    }

                    @Override
                    public void onResponse(String response) {
                        result[0] = response;
                        Log.i("getToken", response);
                    }
                });

        return result[0];
    }
}